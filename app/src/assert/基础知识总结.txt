数据结构分为8类有:堆栈树图与队列、数组链表散列表
colletion
map
list
set


XQ:
大麦、斑马：
hashmap和concurrnethashmap有什么区别？（hashtable）
hashmap：
安全性：线程不安全
组成：底层使用数组+链表，可以使用null键和null值
速度：快
扩容：初始size为16，每次扩容newsize = oldsize*2, size一定是2的N次幂；当Map中的元素总数超过Entry数组的75%，触发扩容，扩容针对整个Map,原来的数组中的元素一次重新计算存放位置，重新插入；插入元素后才开始判断是否扩容，有可能无效扩容（插入一些元素后判断超过75%了，马上扩容，如果元素继续插入，存储都不满80%，这种扩容就是无效扩容）

hashtable:
安全性：线程安全，实现线程安全的方式是在修改数据时synchronized锁住整个HashTable
组成：组成底层数组+链表，key和value都不能为空，线程安全
速度：慢
扩容：初始size为11，扩容newsize = oldsize*+1

concurrenthashmap:
安全性：线程安全，锁分离技术，把整个Map分为N个Segment，允许多个修改操作在各个段内并发进行，效率提升N倍，默认提升16倍。(读操作不加锁，由于HashEntry的value变量是 volatile的，也能保证读取到最新的值。)
组成：分段数组+链表
速度：快
扩容：段内扩容（段内元素超过该段对应Entry数组长度的75%触发扩容，不会对整个Map进行扩容），插入前检测需不需要扩容，有效避免无效扩容

==和equals有什么区别？常用的数据结构有哪些类型？说一下它们的优缺点。
 == 的作用：
　　基本类型：比较的就是值是否相同
　　引用类型：比较的就是地址值是否相同
equals 的作用:
　　引用类型：默认情况下，比较的是地址值。
    注：不过，可以根据情况自己重写该方法。如String类中就被重写，比较的是值
arraylist的扩容机制？
锁有几种类型？
如何反转一个链表？
常用哪些设计模式？
工厂模式有哪几种？
如何做到让几个线程顺序执行？多说几种方法。
stringbuilder和stringbuffer的区别？
volatile的作用，你一般什么情况下使用它？
常用list有哪些？list和set的区别？
view事件分发，dispatchtouchevent方法中onIntercepettouchevent返回不拦截后哪个方法决定后续事件分发下去？
anr有几种类型？
旋转屏幕会发生什么？如何不重走生命周期？
导致oom的原因是什么？有哪些情况举例一下。
一般使用什么工具检测oom？
进程间通信有几种方式？
service有几种类型？有几种启动方式？
retrofit2的原理？用到了哪些设计模式？
插件化的原理？


金山：
system.load和system.loadLibiary的底层做了什么，为什么前者不能引用变量
可以说只要接触过 JNI 开发的就一定要掌握这个知识点。JDK 提供给了我们两个方法用于载入库文件，一个是 System.load(String filename) 方法，另一个是 System.loadLibrary(String libname) 方法，它们的区别主要如下分析。
加载的路径不同：System.load(String filename) 是从作为动态库的本地文件系统中以指定的文件名加载代码文件，文件名参数必须是完整的路径名且带文件后缀；而 System.loadLibrary(String libname) 是加载由 libname 参数指定的系统库（系统库指的是 java.library.path，可以通过 System.getProperty(String key) 方法查看 java.library.path 指向的目录内容），将库名映射到实际系统库的方法取决于系统实现，譬如在 Android 平台系统会自动去系统目录、应用 lib 目录下去找 libname 参数拼接了 lib 前缀的库文件。
是否自动加载库的依赖库：譬如 libA.so 和 libB.so 有依赖关系，如果选择 System.load("/sdcard/path/libA.so")，即使 libB.so 也放在 /sdcard/path/ 路径下，load 方法还是会因为找不到依赖的 libB.so 文件而失败，因为虚拟机在载入 libA.so 的时候发现它依赖于 libB.so，那么会先去 java.library.path 下载入 libB.so，而 libB.so 并不位于 java.library.path 下，所以会报错。
解决的方案就是先 System.load("/sdcard/path/libB.so") 再 System.load("/sdcard/path/libA.so")，但是这种方式不太靠谱，因为必须明确知道依赖关系；另一种解决方案就是使用 System.loadLibrary("A")，然后把 libA.so 和 libB.so 都放在 java.library.path 下即可。

hook技术是如何实现的？
IPC机制听过，那RPC你知道是什么吗？
serializable底层做了什么？
gradle的作用，平时会怎么去使用
分别作用到变量和方法，类上都有些什么不同
有没有反编译过apk，apk打包都做了些什么？

进程间通信都有哪些方法
然后安卓调用h5里面如果有非常多的js方法，我们分了非常多的项目组，给一个方案，如果去注册这些js方法
有序广播和无序广播的区别，说一下你使用有序广播的业务场景
安卓中如果我想打包时动态去替换res下asset的一个abc.zip文件，有什么思路？

科大讯飞：
之前项目用到的MVC、MVP以及MVVP，这三种模式有什么区别？
开发中使用webview时，有没有做什么优化？
android和h5互调时，有没有去了解过js做了什么？简单的说一下互调你这边需要做什么？
你使用jetpack搭建框架时采用的策略是什么？比如需要提前部署哪些功能后续可能用到？
讲一下使用热更新的原理
组件化开发时页面是怎么管理的？Arount的原理是什么？
蓝牙开发时的流程？
使用LeakCanary那有了解过它的原理吗？
Glide三级缓存是一个什么策略？
使用融云做自定义消息时需要添加扩展信息是怎么添加的？
讲一下view的绘制流程
插件化原理
进程间通信都有哪些方法？
进程保活你都会使用哪些方法提高存活率？
你们apk的大小是多大？做了哪些优化让apk大小降低？
app启动优化有做什么？
google在android12中对启动页有做适配，官方有推荐使用的方法你有了解吗？
微信的消息为什么能一直收到？有了解前期他们做过什么吗？一像素的activity为什么后来不使用了？
android的内存管理是一个什么模式？LRU Cache这种先进先出对应数据结构中的哪种结构？

亿咖通：
常用的数据结构有哪些？数组和链表你怎么选择使用场景？
播放视频的时候为什么选择surfaceview，它和普通的view有什么区别？
hashmap是线程安全的吗？我想要一个线程安全的hashmap的话，实现思路有哪些？
线程池你使用过哪些？有了解过它的复用和回收机制吗？
ANR平时有遇到过吗？一般怎么去处理？
OOM导致的场景？
我在activity上点击了一个按钮，事件是如何响应下去的？
你们图片加载为什么要选择Glide？讲一下Glide加载图片的格式8888和565的区别。
进程间是如何通信的，有哪几种方式？你说的这四种里面你觉得哪个性能是最好的，排序说明一下。
讲一下平时Handler如何去避免内存泄漏
强引用，软引用，弱引用回收排一下序
你们检测内存泄漏使用的是什么？讲一下leakcancary的原理。
你们的MVVM使用的框架构建时是怎么考虑的？我回答的是基于google的sunflower项目做了对应自己项目功能的二次封装。
你也使用过MVP，那从开发者的角度说一下你觉得这两种模式最大的区别和为什么后来项目要使用MVVM。



拉钩：
武汉光瑾丰 150-500人 10k-15k
1、根据项目计划，负责手机模块的开发、调试以及功能、性能优化。
2、根据项目计划进行软件缺陷分析、调试、解决和跟踪，并推动平台或第三方软件供应商解决问题。
3、负责相关需求的分析与可行性评估
4、负责功能、技术、测试文档的编写

慧美丰科技研发部  9k-15k
1、 计算机相关专业，本科以上学历，3年以上工作经验，沟通能力强，能够带领团队完成项目；
2、 具有扎实的计算机专业知识，熟悉常用的数据结构以及算法；
3、 具有一定的软件设计能力，熟悉常用的设计模式，能够通过UML工具建模；
4、 具备熟练使用Java语言开发能力，熟悉JNI开发；
5、 熟悉安卓体系结构，熟悉安卓四大组件、xml布局、网络编程、多线程编程；熟悉安卓应用性能调优，并具有一定的应用优化经验；
6、 熟悉安卓系统底层技术或对安卓系统安全有一定经验者优先；
7、 熟悉Vue、js等前端框架，有Weex实际开发经验;熟悉html5特性，css3的样式，熟悉JavaScript 等Web前端开发技术。


长江云新媒体集团  150-500人 12k-18k
1、至少五年以上Android平台开发经验，有大型App上线开发经验者优先；
2、精通掌握JAVA技术，熟悉面向对象编程设计，具备扎实的编程基础；
3、精通Android应用开发框架及Activity生命周期、熟悉Android UI/Framework开发，熟练使用Android SDK、熟练使用SQLite数据库；
4、精通移动网络通信机制，对Socket通信，TCP/IP和HTTP有实际开发经验；
5、良好编程习惯和文档编写习惯、具备良好的分析解决问题能力、有良好的沟通能力；
6、具备良好的框架设计能力和高质量编码能力；
7、能够独立解决疑难问题，具备技术前瞻性，熟悉Android运行机制，对团队技术产生影响力，带领团队技术能力的提升；
8、良好的数据结构和算法基础；
9、具备混合式开发经验，了解H5/JS技术；
10、熟悉NDK开发，具有上线NDK开发经验者尤佳；

优品财富管理有限公司技术 7500-2000人 k-12k 
1.负责android终端的开发和预研工作，主要包括以下内容：
2.实现产品提出的需求，按照设计师的设计实现UI；
3.软件模块的优化和重构；
4.软件问题的快速分析和修复。


澳润激  15-50人 7k-12k 13k-18k 
• 熟练Android SDK；
• 注重编程效率，有丰富的Android工程化与设计解耦能力；
• 熟悉Android CI构建 ；
• 对网络并发、网络通信安全有较全面的理解；
• 对H5开发具有一定的了解；
• 具有中大型项目的模块拆分设计能力，熟知常用框架技术原理实现；

蚂蚁外包：
一面：
1、activityA 跳转到activityB
	显示界面  A onCreate onStart onResum  
	点击跳转  A onPause B onCreate onStart onResume    A onStop
	点击返回  B onPause   A onRestart onStart onResume   B onStop onDestory
	再点返回  A onPause onStop onDestory
	
2、性能界面优化，xml布局层次，view绘制流程
一、启动优化
二、运行时卡顿优化
三、内存优化
四、apk体积优化
五、电量优化


3、事件分发流程，事件冲突viewpager和recycleview事件冲突
事件分发速查表，viewpager和recycleview事件冲突

4、fragment和activity的区别

5、网络加密，数据传输
6、三方框架用过哪些
7、文字添加描边
没有现成的文字描边的属性：
使用自定义
        paint.setStyle(Paint.Style.STROKE);
        paint.setStrokeWidth(mStrokeWidth);


北京景益网络（电商，类似盒马生鲜）
1.app点击图标到启动过程
2.约束布局
3.serviceIntent
4.线程启动三种方式的区别


深圳有为信息
车载安卓高级开发岗

笔试（每题6分）：
1.activity四种启动模式，常用场景
2.广播分类，发广播的几种方式
3.进程间通信方式，写四种
4.手写线程安全单例
5.线程与进程区别，两个应用如何共进程，单个activity如何被不同进程共享
6.jdk ndk sdk adt  在安卓开发中的作用
7.使用过的框架，异步框架，依赖注解框架，网络框架，视频播放器框架（越多越好）
8.ANR OOM问题及解决简述
9.手写一个泛型类
10.写出五个adb命令，如adb push
11.view绘制流程
12.不记得

编程题（任选一题，30分）：
1. 坐标中有三个点，是否可以确定一个圆，如果可以，打印圆心坐标，如果不行，打印无法组成圆
2.输入正整数n，将n分成m个数之和，当m个数之积最大时，打印这m个数，如输入8，打印 2,3,3

翻译题（10分）：
the kernel configuration is kept in the file named .config in the top directionary of kernel source tree。if you expanded the  directionary of the kernel source code, there is no file named .config, you need create. you can create by strach or, ,,,,,

面试
自我介绍，换工作原因
面试没答出来的题目：
1.多媒体中HAL与framework互交接口
1.framework中音频框架了解
2.录屏视频格式rgb yuv ，单帧分析工具软件及分析方法
3.jni的开发，c /c++ 了解多少

总结：简历写的熟悉音视频编解码，结果了解深度不够深，视频只操作buffer，没注意视频颜色空间
jni c / c ++  了解太少，音视频框架了解不过关



芯知
handler原理
事件分发原理
Localbradcast 原理
aidl实现
anr


